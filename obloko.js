document.addEventListener('DOMContentLoaded', function() {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const CONFIG = {
        apiToken: 'dsq1RjN2MooZ21cGRwuHQhWhqpVkY8WagI4vuaUp87I',
        serverUrl: 'https://vitally-fascinated-yak.cloudpub.ru/',
        uploadMethod: 'PUT', // –∏–ª–∏ 'POST' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        maxFileSize: 10 * 1024 * 1024, // 10MB –ª–∏–º–∏—Ç
        allowedTypes: ['image/*', 'text/*', 'application/pdf']
    };


    const DOM = {
        refreshBtn: document.getElementById('refresh-btn'),
        retryBtn: document.getElementById('retry-btn'),
        homeBtn: document.getElementById('home-btn'),
        backBtn: document.getElementById('back-btn'),
        loading: document.getElementById('loading'),
        error: document.getElementById('error'),
        serverContent: document.getElementById('server-content'),
        fileList: document.getElementById('file-list'),
        filePreview: document.getElementById('file-preview'),
        currentPath: document.getElementById('current-path'),
        fileName: document.getElementById('file-name'),
        fileContent: document.getElementById('file-content'),
        uploadForm: document.getElementById('upload-form'),
        fileInput: document.getElementById('file-input'),
        uploadStatus: document.getElementById('upload-status')
    };

    const STATE = {
        currentPath: '/',
        isLoading: false,
        uploadProgress: 0
    };


    init();

    function init() {
        setupEventListeners();
        loadDirectory(STATE.currentPath);
    }

    function setupEventListeners() {
        DOM.refreshBtn.addEventListener('click', () => loadDirectory(STATE.currentPath));
        DOM.retryBtn.addEventListener('click', () => loadDirectory(STATE.currentPath));
        DOM.homeBtn.addEventListener('click', () => navigateTo('/'));
        DOM.backBtn.addEventListener('click', showFileList);
        DOM.uploadForm.addEventListener('submit', handleFileUpload);
    }


    function navigateTo(path) {
        STATE.currentPath = path;
        loadDirectory(path);
    }

    async function loadDirectory(path) {
        if (STATE.isLoading) return;
        
        STATE.isLoading = true;
        showLoading();
        
        try {
            const response = await fetch(`${CONFIG.serverUrl}${path}`, {
                headers: {
                    'Authorization': `Bearer ${CONFIG.apiToken}`
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const contentType = response.headers.get('content-type');
            
            if (contentType.includes('text/html')) {
                const html = await response.text();
                const { folders, files } = parseDirectoryListing(html);
                renderDirectoryListing(folders, files, path);
            } else {
                const content = await response.text();
                renderFileContent(path.split('/').pop(), content);
            }
        } catch (error) {
            console.error('Directory load error:', error);
            showError(error.message);
        } finally {
            STATE.isLoading = false;
        }
    }

    function parseDirectoryListing(html) {
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const links = Array.from(doc.querySelectorAll('a[href]:not([href^="?"])'));
        
        const folders = [];
        const files = [];
        
        links.forEach(link => {
            const href = link.getAttribute('href');
            const text = link.textContent.trim();
            const name = text || href;
            
            if (href.endsWith('/')) {
                folders.push({ name });
            } else {
                files.push({ name, size: 'N/A' });
            }
        });
        
        return { folders, files };
    }

    function renderDirectoryListing(folders, files, path) {
        STATE.currentPath = path;
        DOM.currentPath.textContent = path;
        DOM.fileList.innerHTML = '';
        
        // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ –Ω–µ –∫–æ—Ä–µ–Ω—å)
        if (path !== '/') {
            const parentPath = path.split('/').slice(0, -1).join('/') || '/';
            DOM.fileList.appendChild(createFileItem({
                name: '..',
                type: 'folder',
                size: '',
                onClick: () => navigateTo(parentPath)
            }));
        }
        
        // –ü–∞–ø–∫–∏
        folders.forEach(folder => {
            const newPath = path === '/' ? `/${folder.name}` : `${path}/${folder.name}`;
            DOM.fileList.appendChild(createFileItem({
                name: folder.name,
                type: 'folder',
                size: '',
                onClick: () => navigateTo(newPath + '/')
            }));
        });
        
        // –§–∞–π–ª—ã
        files.forEach(file => {
            const filePath = path === '/' ? `/${file.name}` : `${path}/${file.name}`;
            DOM.fileList.appendChild(createFileItem({
                name: file.name,
                type: 'file',
                size: file.size,
                onClick: () => navigateTo(filePath)
            }));
        });
        
        showServerContent();
    }

    function createFileItem({ name, type, size, onClick }) {
        const item = document.createElement('div');
        item.className = `file-item ${type}`;
        item.innerHTML = `
            <div class="file-icon">${type === 'folder' ? 'üìÅ' : 'üìÑ'}</div>
            <div class="file-name">${name}</div>
            <div class="file-size">${type === 'folder' ? '–ü–∞–ø–∫–∞' : formatFileSize(size)}</div>
        `;
        item.addEventListener('click', onClick);
        return item;
    }

    function renderFileContent(fileName, content) {
        DOM.fileName.textContent = fileName;
        DOM.fileContent.textContent = content;
        DOM.filePreview.style.display = 'block';
        DOM.fileList.style.display = 'none';
        hideLoading();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    async function handleFileUpload(e) {
        e.preventDefault();
        
        if (!DOM.fileInput.files.length) {
            showUploadStatus('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', 'error');
            return;
        }
        
        const files = Array.from(DOM.fileInput.files);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
        for (const file of files) {
            if (file.size > CONFIG.maxFileSize) {
                showUploadStatus(`–§–∞–π–ª ${file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. ${formatFileSize(CONFIG.maxFileSize)})`, 'error');
                return;
            }
            
            if (!isFileTypeAllowed(file.type)) {
                showUploadStatus(`–¢–∏–ø —Ñ–∞–π–ª–∞ ${file.name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`, 'error');
                return;
            }
        }
        
        try {
            showUploadStatus(`–ó–∞–≥—Ä—É–∑–∫–∞ ${files.length} —Ñ–∞–π–ª–æ–≤...`, '');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            for (const file of files) {
                await uploadSingleFile(file);
            }
            
            showUploadStatus(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`, 'success');
            setTimeout(() => loadDirectory(STATE.currentPath), 1500);
        } catch (error) {
            console.error('Upload error:', error);
            showUploadStatus(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
        } finally {
            DOM.fileInput.value = '';
        }
    }

    async function uploadSingleFile(file) {
        const formData = new FormData();
        formData.append('file', file);
        
        const uploadPath = STATE.currentPath === '/' ? 
            file.name : 
            `${STATE.currentPath}/${file.name}`;
        
        const response = await fetch(`${CONFIG.serverUrl}${uploadPath}`, {
            method: CONFIG.uploadMethod,
            headers: {
                'Authorization': `Bearer ${CONFIG.apiToken}`
            },
            body: formData
        });
        
        if (!response.ok) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${file.name}`);
        }
        
        return response;
    }

    function isFileTypeAllowed(fileType) {
        if (!fileType) return true; // –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º
        return CONFIG.allowedTypes.some(allowed => {
            if (allowed.endsWith('/*')) {
                return fileType.startsWith(allowed.split('/*')[0]);
            }
            return fileType === allowed;
        });
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function formatFileSize(bytes) {
        if (!bytes || bytes === 'N/A') return 'N/A';
        const units = ['Bytes', 'KB', 'MB', 'GB'];
        const exp = Math.floor(Math.log(bytes) / Math.log(1024));
        return `${(bytes / Math.pow(1024, exp)).toFixed(2)} ${units[exp]}`;
    }

    function showUploadStatus(message, type) {
        DOM.uploadStatus.textContent = message;
        DOM.uploadStatus.className = `upload-status ${type}`;
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UI
    function showLoading() {
        DOM.loading.style.display = 'block';
        DOM.error.style.display = 'none';
        DOM.serverContent.style.display = 'none';
    }

    function hideLoading() {
        DOM.loading.style.display = 'none';
    }

    function showError(message) {
        DOM.error.querySelector('p').textContent = message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö';
        DOM.error.style.display = 'block';
        DOM.loading.style.display = 'none';
        DOM.serverContent.style.display = 'none';
    }

    function showServerContent() {
        DOM.loading.style.display = 'none';
        DOM.error.style.display = 'none';
        DOM.serverContent.style.display = 'block';
        DOM.filePreview.style.display = 'none';
        DOM.fileList.style.display = 'grid';
    }

    function showFileList() {
        DOM.filePreview.style.display = 'none';
        DOM.fileList.style.display = 'grid';
    }
});